name: CD - Deploy to EC2 with Docker 

on:
  push:
    branches:
      - sprint3-workflows  

jobs:
  check-image-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v3    

      # Step 2: Check if Docker Image Exists
      - name: Check if Docker Image Exists
        id: check_image
        run: |
          REPOSITORY="finalsprinttodoapp/myapp"  
          TAG="latest"
          
          # ใช้ curl เพื่อตรวจสอบ Docker image
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_TOKEN }}" \
            "https://hub.docker.com/v2/repositories/${REPOSITORY}/tags/${TAG}/")
          
          if [ "$RESPONSE" -ne 200 ]; then
              echo "Docker image not found: ${REPOSITORY}:${TAG}. Exiting workflow."
              exit 1
          fi
          
          echo "Docker image exists. Proceeding to deployment."

      # Step 3: Set AWS Credentials in Environment Variables
      - name: Set AWS Credentials
        if: ${{ steps.check_image.outcome == 'success' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: echo "AWS credentials set."

      # Step 4: Create EC2 Instance and Deploy the Application
      - name: Create EC2 Instance and Deploy the Application
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Step 1: Create EC2 instance
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0866a3c8686eaeeba \
            --instance-type t2.micro \
            --key-name ${{ secrets.AWS_KP_NAME }} \
            --security-group-ids ${{ secrets.AWS_SG_ID }} \
            --user-data file://user-data.sh \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Instance ID: $INSTANCE_ID"

          # Step 2: Verify EC2 Instance Creation
          if [ $? -ne 0 ]; then
            echo "Error: EC2 instance creation failed."
            exit 1
          fi

          echo "EC2 instance created successfully with ID: $INSTANCE_ID"

          # Step 3: Debugging Instance Status
          INSTANCE_STATUS=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text)
          echo "Instance status: $INSTANCE_STATUS"
          
          if [ "$INSTANCE_STATUS" == "shutting-down" ]; then
            echo "Error: Instance is shutting down. Creating a new instance..."
            # Recreate EC2 instance if it's shutting down
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ami-0866a3c8686eaeeba \
              --instance-type t2.micro \
              --key-name ${{ secrets.AWS_KP_NAME }} \
              --security-group-ids ${{ secrets.AWS_SG_ID }} \
              --user-data file://user-data.sh \
              --query 'Instances[0].InstanceId' \
              --output text)
            echo "New instance created with ID: $INSTANCE_ID"
          fi

          # Step 4: Wait for the instance to be running
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID
          echo "Instance is now running."

          # Step 5: Get Public DNS of the EC2 instance
          INSTANCE_PUBLIC_DNS=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicDnsName' \
            --output text)
          echo "Instance Public DNS: $INSTANCE_PUBLIC_DNS"

          # Step 6: Deploy Docker image to the EC2 instance
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.AWS_KP_NAME }}.pem ubuntu@$INSTANCE_PUBLIC_DNS << EOF
            echo "Installing Docker on EC2 instance..."
            sudo apt-get update -y
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            echo "Docker installation completed."

            echo "Pulling Docker image from DockerHub..."
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest

            echo "Running Docker container on EC2 instance..."
            sudo docker run -d -p 80:80 ${{ secrets.DOCKER_USERNAME }}/myapp:latest

            echo "Checking Docker container status..."
            sudo docker ps
          EOF

          if [ $? -ne 0 ]; then
            echo "Error: Docker container deployment failed."
            exit 1
          fi

          echo "Docker container deployed successfully."
